/**
 * PerformanceUtils - —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –î–µ–±–∞—É–Ω—Å–∏–Ω–≥, throttling, batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
class PerformanceUtils {
    constructor() {
        this._debounceTimers = new Map();
        this._throttleTimers = new Map();
        this._batchOperations = new Map();
        this._renderQueue = [];
        this._isRendering = false;
    }

    // === –î–ï–ë–ê–£–ù–°–ò–ù–ì ===

    /**
     * –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
     * @param {Function} func - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param {number} delay - –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @param {string} key - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
     * @returns {Function} - –æ–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
     */
    debounce(func, delay, key = 'default') {
        return (...args) => {
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
            if (this._debounceTimers.has(key)) {
                clearTimeout(this._debounceTimers.get(key));
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
            const timer = setTimeout(() => {
                func.apply(this, args);
                this._debounceTimers.delete(key);
            }, delay);
            
            this._debounceTimers.set(key, timer);
        };
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–µ–±–∞—É–Ω—Å —Ç–∞–π–º–µ—Ä—ã
     */
    clearDebounceTimers() {
        this._debounceTimers.forEach(timer => clearTimeout(timer));
        this._debounceTimers.clear();
    }

    // === THROTTLING ===

    /**
     * Throttling —Ñ—É–Ω–∫—Ü–∏–∏ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —á–∞—â–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
     * @param {Function} func - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param {number} limit - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
     * @param {string} key - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
     * @returns {Function} - –æ–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
     */
    throttle(func, limit, key = 'default') {
        return (...args) => {
            if (!this._throttleTimers.has(key)) {
                func.apply(this, args);
                this._throttleTimers.set(key, setTimeout(() => {
                    this._throttleTimers.delete(key);
                }, limit));
            }
        };
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ throttle —Ç–∞–π–º–µ—Ä—ã
     */
    clearThrottleTimers() {
        this._throttleTimers.forEach(timer => clearTimeout(timer));
        this._throttleTimers.clear();
    }

    // === BATCH –û–ü–ï–†–ê–¶–ò–ò ===

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ batch
     * @param {string} batchKey - –∫–ª—é—á batch
     * @param {Function} operation - –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param {number} delay - –∑–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è batch
     */
    addToBatch(batchKey, operation, delay = 16) {
        if (!this._batchOperations.has(batchKey)) {
            this._batchOperations.set(batchKey, []);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ batch —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                this._executeBatch(batchKey);
            }, delay);
        }
        
        this._batchOperations.get(batchKey).push(operation);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å batch –æ–ø–µ—Ä–∞—Ü–∏–π
     * @param {string} batchKey - –∫–ª—é—á batch
     */
    _executeBatch(batchKey) {
        const operations = this._batchOperations.get(batchKey);
        if (!operations) return;
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ batch
        operations.forEach(operation => {
            try {
                operation();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ batch –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
            }
        });
        
        // –û—á–∏—â–∞–µ–º batch
        this._batchOperations.delete(batchKey);
    }

    // === –û–ß–ï–†–ï–î–¨ –†–ï–ù–î–ï–†–ò–ù–ì–ê ===

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤ –æ—á–µ—Ä–µ–¥—å
     * @param {Function} renderOperation - –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     * @param {number} priority - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0 - –≤—ã—Å–æ–∫–∏–π, 1 - —Å—Ä–µ–¥–Ω–∏–π, 2 - –Ω–∏–∑–∫–∏–π)
     */
    addToRenderQueue(renderOperation, priority = 1) {
        this._renderQueue.push({ operation: renderOperation, priority });
        this._scheduleRender();
    }

    /**
     * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
     */
    _scheduleRender() {
        if (this._isRendering) return;
        
        this._isRendering = true;
        requestAnimationFrame(() => {
            this._processRenderQueue();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    _processRenderQueue() {
        if (window.performanceMonitor) {
            window.performanceMonitor.startRenderTimer();
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        this._renderQueue.sort((a, b) => a.priority - b.priority);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        while (this._renderQueue.length > 0) {
            const { operation } = this._renderQueue.shift();
            try {
                operation();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:', error);
            }
        }
        
        if (window.performanceMonitor) {
            window.performanceMonitor.endRenderTimer();
        }
        
        this._isRendering = false;
    }

    // === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø DOM ===

    /**
     * Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     * @param {Array} updates - –º–∞—Å—Å–∏–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π {id, type, value}
     */
    batchDOMUpdates(updates) {
        if (!window.DOM) return;
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        const textUpdates = updates.filter(u => u.type === 'text');
        const htmlUpdates = updates.filter(u => u.type === 'html');
        const styleUpdates = updates.filter(u => u.type === 'style');
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏
        this.addToRenderQueue(() => {
            textUpdates.forEach(update => {
                window.DOM.setText(update.id, update.value);
            });
        }, 0);
        
        this.addToRenderQueue(() => {
            htmlUpdates.forEach(update => {
                window.DOM.setHTML(update.id, update.value);
            });
        }, 1);
        
        this.addToRenderQueue(() => {
            styleUpdates.forEach(update => {
                const element = window.DOM.get(update.id);
                if (element) {
                    Object.assign(element.style, update.value);
                }
            });
        }, 2);
    }

    /**
     * –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     * @param {Array} data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {Function} renderItem - —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {number} itemHeight - –≤—ã—Å–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {number} visibleCount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    createVirtualList(data, renderItem, itemHeight, visibleCount = 10) {
        const container = document.createElement('div');
        container.style.position = 'relative';
        container.style.height = `${data.length * itemHeight}px`;
        container.style.overflow = 'hidden';
        
        const viewport = document.createElement('div');
        viewport.style.position = 'absolute';
        viewport.style.top = '0';
        viewport.style.left = '0';
        viewport.style.right = '0';
        viewport.style.height = `${visibleCount * itemHeight}px`;
        viewport.style.overflow = 'auto';
        
        let startIndex = 0;
        let endIndex = visibleCount;
        
        const renderVisibleItems = () => {
            viewport.innerHTML = '';
            const visibleData = data.slice(startIndex, endIndex);
            
            visibleData.forEach((item, index) => {
                const element = renderItem(item, startIndex + index);
                element.style.position = 'absolute';
                element.style.top = `${(startIndex + index) * itemHeight}px`;
                element.style.width = '100%';
                element.style.height = `${itemHeight}px`;
                viewport.appendChild(element);
            });
        };
        
        viewport.addEventListener('scroll', this.throttle(() => {
            const scrollTop = viewport.scrollTop;
            startIndex = Math.floor(scrollTop / itemHeight);
            endIndex = Math.min(startIndex + visibleCount, data.length);
            renderVisibleItems();
        }, 16, 'virtual-list-scroll'));
        
        container.appendChild(viewport);
        renderVisibleItems();
        
        return container;
    }

    // === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ê–ú–Ø–¢–ò ===

    /**
     * –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    cleanupMemory() {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        this.clearDebounceTimers();
        this.clearThrottleTimers();
        
        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
        this._renderQueue.length = 0;
        this._batchOperations.clear();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if (window.gc) {
            window.gc();
        }
        
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
     */
    startMemoryLeakDetection() {
        if (!performance.memory) return;
        
        const initialMemory = performance.memory.usedJSHeapSize;
        let lastMemory = initialMemory;
        let increasingCount = 0;
        
        setInterval(() => {
            const currentMemory = performance.memory.usedJSHeapSize;
            
            if (currentMemory > lastMemory) {
                increasingCount++;
                
                if (increasingCount > 10) {
                    console.warn('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏:', {
                        initial: Math.round(initialMemory / 1024 / 1024) + 'MB',
                        current: Math.round(currentMemory / 1024 / 1024) + 'MB',
                        increase: Math.round((currentMemory - initialMemory) / 1024 / 1024) + 'MB'
                    });
                }
            } else {
                increasingCount = 0;
            }
            
            lastMemory = currentMemory;
        }, 5000);
    }

    // === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ò–ó–ú–ï–†–ï–ù–ò–Ø ===

    /**
     * –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
     * @param {Function} func - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
     * @param {string} name - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {*} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
     */
    measureExecutionTime(func, name = 'Function') {
        const start = performance.now();
        const result = func();
        const end = performance.now();
        
        console.log(`‚è±Ô∏è ${name} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∑–∞ ${(end - start).toFixed(2)}ms`);
        
        return result;
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param {Function} asyncFunc - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
     * @param {string} name - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {Promise} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
     */
    async measureAsyncExecutionTime(asyncFunc, name = 'Async Function') {
        const start = performance.now();
        const result = await asyncFunc();
        const end = performance.now();
        
        console.log(`‚è±Ô∏è ${name} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∑–∞ ${(end - start).toFixed(2)}ms`);
        
        return result;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä PerformanceUtils
window.performanceUtils = new PerformanceUtils();
