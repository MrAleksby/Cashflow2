/**
 * EventBus - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–ª–∞–±—É—é —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class EventBus {
    constructor() {
        this._events = new Map();
        this._middleware = [];
        this._debug = false; // –í–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     * @param {string} event - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
     * @param {Object} options - –æ–ø—Ü–∏–∏ (once: true –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
     * @returns {Function} - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
     */–∞—á–∏—Ç –≤
    on(event, callback, options = {}) {
        if (!this._events.has(event)) {
            this._events.set(event, []);
        }

        const listener = {
            callback,
            once: options.once || false,
            id: this._generateId()
        };

        this._events.get(event).push(listener);

        if (this._debug) {
            console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: ${event} (ID: ${listener.id})`);
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
        return () => this.off(event, callback);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
     * @param {string} event - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
     * @returns {Function} - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
     */
    once(event, callback) {
        return this.on(event, callback, { once: true });
    }

    /**
     * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
     */
    off(event, callback) {
        if (!this._events.has(event)) return;

        const listeners = this._events.get(event);
        const index = listeners.findIndex(listener => listener.callback === callback);
        
        if (index !== -1) {
            const removed = listeners.splice(index, 1)[0];
            if (this._debug) {
                console.log(`üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è: ${event} (ID: ${removed.id})`);
            }
        }
    }

    /**
     * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
     * @param {string} event - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö)
     */
    offAll(event = null) {
        if (event) {
            this._events.delete(event);
            if (this._debug) {
                console.log(`üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏—è: ${event}`);
            }
        } else {
            this._events.clear();
            if (this._debug) {
                console.log('üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π');
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
     * @param {string} event - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {*} data - –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Object} options - –æ–ø—Ü–∏–∏ (async: true –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
     */
    emit(event, data = null, options = {}) {
        if (this._debug) {
            console.log(`üì° –°–æ–±—ã—Ç–∏–µ: ${event}`, data);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware
        let processedData = data;
        for (const middleware of this._middleware) {
            try {
                processedData = middleware(event, processedData);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –≤ middleware –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
            }
        }

        if (!this._events.has(event)) {
            if (this._debug) {
                console.log(`üì° –ù–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è: ${event}`);
            }
            return;
        }

        const listeners = this._events.get(event);
        const toRemove = [];

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for (let i = 0; i < listeners.length; i++) {
            const listener = listeners[i];
            
            try {
                if (options.async) {
                    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    Promise.resolve().then(() => {
                        listener.callback(processedData);
                    }).catch(error => {
                        console.error(`–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
                    });
                } else {
                    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    listener.callback(processedData);
                }

                // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –µ—Å–ª–∏ —ç—Ç–æ once-—Å–ª—É—à–∞—Ç–µ–ª—å
                if (listener.once) {
                    toRemove.push(i);
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
            }
        }

        // –£–¥–∞–ª—è–µ–º once-—Å–ª—É—à–∞—Ç–µ–ª–∏
        for (let i = toRemove.length - 1; i >= 0; i--) {
            listeners.splice(toRemove[i], 1);
        }
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å middleware
     * @param {Function} middleware - —Ñ—É–Ω–∫—Ü–∏—è middleware
     */
    use(middleware) {
        this._middleware.push(middleware);
    }

    /**
     * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
     * @param {boolean} enabled - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
     */
    setDebug(enabled) {
        this._debug = enabled;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @returns {number} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
     */
    getListenerCount(event) {
        return this._events.has(event) ? this._events.get(event).length : 0;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
     * @returns {Array} - –º–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ–±—ã—Ç–∏–π
     */
    getEvents() {
        return Array.from(this._events.keys());
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
     * @returns {string} - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    _generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä EventBus
window.eventBus = new EventBus();

// –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    window.eventBus.setDebug(true);
}

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
window.eventBus.use((event, data) => {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    return data;
});

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.AppEvents = {
    // –°–æ–±—ã—Ç–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    GAME_STATE_LOADED: 'game:state:loaded',
    GAME_STATE_SAVED: 'game:state:saved',
    GAME_RESET: 'game:reset',
    
    // –°–æ–±—ã—Ç–∏—è –¥–µ–Ω–µ–≥
    CASH_CHANGED: 'cash:changed',
    CASH_ADDED: 'cash:added',
    CASH_REMOVED: 'cash:removed',
    
    // –°–æ–±—ã—Ç–∏—è –¥–æ—Ö–æ–¥–æ–≤
    INCOME_ADDED: 'income:added',
    INCOME_REMOVED: 'income:removed',
    INCOME_CHANGED: 'income:changed',
    
    // –°–æ–±—ã—Ç–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    EXPENSE_ADDED: 'expense:added',
    EXPENSE_REMOVED: 'expense:removed',
    EXPENSE_CHANGED: 'expense:changed',
    
    // –°–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–æ–≤
    ASSET_ADDED: 'asset:added',
    ASSET_REMOVED: 'asset:removed',
    ASSET_CHANGED: 'asset:changed',
    
    // –°–æ–±—ã—Ç–∏—è –ø–∞—Å—Å–∏–≤–æ–≤
    LIABILITY_ADDED: 'liability:added',
    LIABILITY_REMOVED: 'liability:removed',
    LIABILITY_CHANGED: 'liability:changed',
    
    // –°–æ–±—ã—Ç–∏—è –¥–µ—Ç–µ–π
    CHILD_ADDED: 'child:added',
    CHILD_REMOVED: 'child:removed',
    CHILD_CHANGED: 'child:changed',
    
    // –°–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—Ç—ã
    JOB_SET: 'job:set',
    JOB_QUIT: 'job:quit',
    JOB_CHANGED: 'job:changed',
    
    // –°–æ–±—ã—Ç–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    HISTORY_ADDED: 'history:added',
    HISTORY_CLEARED: 'history:cleared',
    
    // –°–æ–±—ã—Ç–∏—è –º–µ—Å—è—Ü–µ–≤
    MONTHS_INCREMENTED: 'months:incremented',
    
    // –°–æ–±—ã—Ç–∏—è UI
    UI_UPDATE_REQUIRED: 'ui:update:required',
    UI_SCREEN_CHANGED: 'ui:screen:changed',
    UI_MODAL_OPENED: 'ui:modal:opened',
    UI_MODAL_CLOSED: 'ui:modal:closed',
    
    // –°–æ–±—ã—Ç–∏—è PayDay
    PAYDAY_TRIGGERED: 'payday:triggered',
    PAYDAY_COMPLETED: 'payday:completed',
    
    // –°–æ–±—ã—Ç–∏—è –æ—à–∏–±–æ–∫
    ERROR_OCCURRED: 'error:occurred',
    VALIDATION_FAILED: 'validation:failed'
};
